#!/usr/bin/env ruby

require "optparse"
require "fileutils"

options = {
  file: "config/snapimage_config.yml",
  size: 10485760,
  force: false
}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: snapimage_generate_config <adapter> [options]"

  opts.separator ""
  opts.separator "adapter\tStorage adapter to use (local, cloudinary)"

  opts.separator ""
  opts.separator "Options:"

  opts.on("-f", "--file FILE", "File to generate (Default: config/snapimage_config.yml)") do |file|
    options[:file] = file
  end

  opts.on("-s", "--size SIZE", "Max file size in bytes (Default: 10485760)") do |size|
    options[:size] = size.to_i
  end

  opts.on("-r", "--local_root PATH", "Path to the directory where the images will be stored (only for the local adapter and must be specified)") do |local_root|
    options[:local_root] = local_root
  end

  opts.on("-u", "--public_url URL", "Public URL to where the images will be accessible (only for the local adapter and must be specified)") do |public_url|
    options[:public_url] = public_url
  end

  opts.on("--force", "Overwrites the file if it exists") do
    options[:force] = true
  end

  opts.on("-h", "--help", "Display the help screen") do
    puts opts
    exit
  end
end
optparse.parse!

unless ARGV.length == 1
  puts "Missing adapter."
  puts
  puts optparse.help
  exit
end
adapter = ARGV[0]

# Check for mandatory options.
if adapter == "local"
  if !options[:local_root] or !options[:public_url]
    puts "When using the local adapter, local_root and public_url must be specified."
    puts
    puts optparse.help
    exit
  end
elsif adapter == "cloudinary"
  # Nothing to check for.
else
  puts optparse.help
  exit
end

if !options[:force] && File.exists?(options[:file])
  puts "File '#{options[:file]}' already exists. Use --force if you want to overwrite."
  puts "Config file not generated."
  puts
  puts optparse.help
  exit
end

FileUtils.mkdir_p(File.dirname(options[:file]))
File.open(options[:file], "w") do |f|
  if adapter == "local"
    f.write(<<-EOF
adapter: "local"
directory: "#{options[:local_root]}"
public_url: "#{options[:public_url]}"
max_file_size: #{options[:size]}
    EOF
    )
  elsif adapter == "cloudinary"
    f.write(<<-EOF
adapter: "cloudinary"
    EOF
    )
  end
end
puts "Config file generated at '#{options[:file]}'."
